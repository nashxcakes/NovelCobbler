/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package novelcobbler;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author nash
 */
public class TextParser extends javax.swing.JDialog {

    /**
     * Creates new form TextParser
     */
    public TextParser(java.awt.Frame parent, boolean modal, String t) {
        super(parent, modal);
        initComponents();
        
        progLabel.setText("Loading File...");
        
        abort = false;
        sentences = new ArrayList<Sentence>();
        tags = new ArrayList<Tag>();
                
        text = t;
        //System.out.println("Text: " + text);

        if(!text.isEmpty() && !abort) {
            progLabel.setText("Parsing Sentence: ");
            progBar.setValue(0);
            progBar.setMaximum(text.length());

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() { 
                    System.out.println("Parsing!");
                    parse(); 
                };
            });
        } else setVisible(false);
    }
    
    private void parse() {
        String[] parsed = SentenceParser.parseSentence(text);
        text = parsed[1];
        String tmp = parsed[0];
        final int CAP = 50;
        if(tmp.length() > CAP) {
            tmp = tmp.substring(0, CAP - 3).concat("...");
        }
        sentLabel.setText(tmp);
        
        Sentence sent = SentenceParser.toSentence(parsed[0]);
        
        for(Tag t : sent.getTags()) {
            if(!tagsHas(t)) {
                //System.out.println("Adding tag.");
                tags.add(t);
            }
        }
        
        progBar.setValue(progBar.getValue() + parsed[0].length());
        
        sentences.add(sent);
        
        if(!text.isEmpty() && !abort) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    parse();
                }
            });
        } else {
            setVisible(false);
        }
    }
    
    private boolean tagsHas(Tag t) {
        boolean has = false;
        
        for(int i = 0; i < tags.size() && !has; i++) {
            if(tags.get(i).equals(t)) {
                has = true;
            }
        }
        
        return has;
    }
    
    public ArrayList<Sentence> getSentences() { return sentences; }
    public ArrayList<Tag> getTags() { return tags; }
    public boolean aborted() { return abort; }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        progLabel = new javax.swing.JLabel();
        progBar = new javax.swing.JProgressBar();
        abortButton = new javax.swing.JButton();
        sentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Parsing Sentences...");

        progLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progLabel.setText("Initiating...");
        progLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        progLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        progLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        abortButton.setText("Abort");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        sentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sentLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(156, Short.MAX_VALUE)
                .addComponent(abortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sentLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(abortButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        abort = true;
        setVisible(false);
    }//GEN-LAST:event_abortButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar progBar;
    private javax.swing.JLabel progLabel;
    private javax.swing.JLabel sentLabel;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Sentence> sentences;
    private ArrayList<Tag> tags;
    private boolean abort;
    private String text;
}
