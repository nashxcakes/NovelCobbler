/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package novelcobbler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author nash
 */
public class NovelCobblerFrame extends javax.swing.JFrame {

    /**
     * Creates new form NovelCobblerFrame
     */
    public NovelCobblerFrame() {
        initComponents();
        
        sentences = new ArrayList<Sentence>();
        tags = new ArrayList<Tag>();
        wordCount = 0;
        goal = 500;
        wordsProgress.setMaximum(goal);
        updateWords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sentenceField = new javax.swing.JTextArea();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tagList = new javax.swing.JList();
        newTagLabel = new javax.swing.JLabel();
        newTagField = new javax.swing.JTextField();
        addTagButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        wordsLabel = new javax.swing.JLabel();
        changeGoalButton = new javax.swing.JButton();
        cobbleButton = new javax.swing.JButton();
        wordsProgress = new javax.swing.JProgressBar();
        nanoCheck = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        aboutButton = new javax.swing.JButton();
        tagListLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Novel Cobbler (Version 1.0)");

        jLabel1.setText("Enter a Sentence");

        sentenceField.setColumns(20);
        sentenceField.setLineWrap(true);
        sentenceField.setRows(5);
        sentenceField.setToolTipText("Enter a sentence to add to your novel.");
        sentenceField.setWrapStyleWord(true);
        sentenceField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sentenceFieldKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(sentenceField);

        addButton.setText("Add");
        addButton.setToolTipText("Add the current sentence to the novel.");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear the current sentence text.");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        tagList.setToolTipText("Use Tags to help group together specific characters, places, objects, and so forth!");
        tagList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tagList);

        newTagLabel.setText("Add New Tag");

        newTagField.setToolTipText("Create a new tag.");
        newTagField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTagFieldActionPerformed(evt);
            }
        });
        newTagField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newTagFieldKeyReleased(evt);
            }
        });

        addTagButton.setText("Add Tag");
        addTagButton.setToolTipText("");
        addTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Properties"));

        wordsLabel.setText("Words: ");

        changeGoalButton.setText("Goal");
        changeGoalButton.setToolTipText("Change your word count goal.");
        changeGoalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeGoalButtonActionPerformed(evt);
            }
        });

        cobbleButton.setText("Cobble");
        cobbleButton.setToolTipText("Cobble your sentences together into a full-fledged novel.");
        cobbleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobbleButtonActionPerformed(evt);
            }
        });

        nanoCheck.setText("NaNoWriMode");
        nanoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nanoCheckActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setToolTipText("Save your progress and continue working.");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.setToolTipText("Load a previously saved project.");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        titleLabel.setText("Title:");

        titleField.setText("Novel");
        titleField.setToolTipText("The Title of your Novel");

        aboutButton.setText("About");
        aboutButton.setToolTipText("What is this thing anyway?");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(wordsProgress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(wordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeGoalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleField))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(nanoCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cobbleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aboutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(wordsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordsProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(changeGoalButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nanoCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cobbleButton)
                    .addComponent(saveButton)
                    .addComponent(loadButton)
                    .addComponent(aboutButton))
                .addContainerGap())
        );

        tagListLabel.setText("Sentence Tags");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(addTagButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(newTagLabel)
                    .addComponent(newTagField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagListLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tagListLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newTagLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newTagField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addTagButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(clearButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        importMenuItem.setText("Import Text");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importMenuItem);

        exitMenuItem.setText("Exit");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagButtonActionPerformed
        addTag();
    }//GEN-LAST:event_addTagButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addSentence();
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        sentenceField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void changeGoalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeGoalButtonActionPerformed
        String newGoal = JOptionPane.showInputDialog(
                "Enter the new goal amount:");
        
        try {
            int ng = Integer.parseInt(newGoal);
            
            if(ng > 0) {
                goal = ng; 
                wordsProgress.setMaximum(goal);
                updateWords();
            }
        } catch(NumberFormatException e) {
            // Welp
        }
    }//GEN-LAST:event_changeGoalButtonActionPerformed

    private void nanoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nanoCheckActionPerformed
        if(nanoCheck.isSelected()) {
            JOptionPane.showMessageDialog(null, "Engaging NaNoWriMode! Hold on to your "
                + "pants.");
        } else {
            JOptionPane.showMessageDialog(null, "NaNoWriMode Disengaged. :(");
        }
        
        toggleNanoMode();
    }//GEN-LAST:event_nanoCheckActionPerformed

    private void cobbleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobbleButtonActionPerformed
        cobble();
    }//GEN-LAST:event_cobbleButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        load();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void sentenceFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sentenceFieldKeyReleased
        if(evt.getKeyChar() == '\n') {
            addSentence();
        }
    }//GEN-LAST:event_sentenceFieldKeyReleased

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        JOptionPane.showMessageDialog(null, "Novel Cobbler lets you create "
                + "novels (or, more likely, smaller texts) by\n entering a number "
                + "of sentences, which will then be cobbled together\n to form "
                + "a literary masterpiece*. \n\n(*Subjective Literary Masterpiece "
                + "guaranteed; Objective Masterpiece results may vary.)");
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void newTagFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTagFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newTagFieldActionPerformed

    private void newTagFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newTagFieldKeyReleased
        if(evt.getKeyChar() == '\n') addTag();
    }//GEN-LAST:event_newTagFieldKeyReleased

    private void tagListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagListMouseClicked
        /*if(evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
            int index = tagList.locationToIndex(evt.getLocationOnScreen());
            
            if(tagList.isSelectedIndex(index)) {
                tagList.removeSelectionInterval(-1, index);
            } else {
                tagList.addSelectionInterval(-1, index);
            }
        } else if(evt.getButton() == java.awt.event.MouseEvent.BUTTON2) {
            int index = tagList.locationToIndex(evt.getLocationOnScreen());
            
            if(tagList.isSelectedIndex(index)) {
                tagList.removeSelectionInterval(index, index);
            }
        }*/
        
        //evt.consume();
    }//GEN-LAST:event_tagListMouseClicked

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        load();
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        save();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed
        importText();
    }//GEN-LAST:event_importMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NovelCobblerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NovelCobblerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NovelCobblerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NovelCobblerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NovelCobblerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addTagButton;
    private javax.swing.JButton changeGoalButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton cobbleButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadButton;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBox nanoCheck;
    private javax.swing.JTextField newTagField;
    private javax.swing.JLabel newTagLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextArea sentenceField;
    private javax.swing.JList tagList;
    private javax.swing.JLabel tagListLabel;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel wordsLabel;
    private javax.swing.JProgressBar wordsProgress;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Sentence> sentences;
    private ArrayList<Tag> tags;
    private int wordCount, goal;
    private final int NANOWRIMO = 50000;
    
    private void populateList() {      
        tagList.setListData(tags.toArray());
    }
    
    private void updateWords() {
        wordsLabel.setText("Words: " + wordCount + "/" + goal);
        wordsProgress.setValue(wordCount);
        
        if(nanoCheck.isSelected() && wordCount >= goal) {
            cobbleButton.setEnabled(true);
        }
    }
    
    private void addSentence() {
        if(!sentenceField.getText().isEmpty()) {
            Sentence temp = new Sentence(sentenceField.getText());
            for(int i = 0; i < tags.size(); i++) {
                if(tagList.isSelectedIndex(i)) {
                    temp.addTag(tags.get(i));
                }
            }
            
            sentences.add(temp);
            wordCount += temp.getWordCount();
            updateWords();
            sentenceField.setText("");
        }
    }
    
    private void toggleNanoMode() {
        if(nanoCheck.isSelected()) {
            changeGoalButton.setEnabled(false);
            goal = NANOWRIMO;
            wordsProgress.setMaximum(goal);
            updateWords();
            if(wordCount < goal) {
                cobbleButton.setEnabled(false);
            }
        } else {
            changeGoalButton.setEnabled(true);
            cobbleButton.setEnabled(true);
        }
    }
    
    private void addTag() {
        if(!newTagField.getText().isEmpty()) {
            boolean contains = false;
            Tag tTag = new Tag(newTagField.getText());
            
            for(int i = 0; !contains && i < tags.size(); i++) {
                if(tags.get(i).equals(tTag)) {
                    contains = true;
                }
            }
            
            if(!contains) {
                tags.add(tTag);
                populateList();
            }
            
            newTagField.setText("");
        }
    }

    private void countWords() {
        wordCount = 0;
        
        for(Sentence sentence : sentences) {
            wordCount += sentence.getWordCount();
        }
        
        updateWords();
    }
    
    private boolean tagsHas(Tag t) {
        boolean has = false;
        
        for(int i = 0; i < tags.size() && !has; i++) {
            if(tags.get(i).equals(t)) {
                has = true;
            }
        }
        
        return has;
    }
    
    private void importText() {
        JFileChooser fInput = new JFileChooser();
        FileNameExtensionFilter filter = 
                new FileNameExtensionFilter("Text Files", "txt");
        fInput.setFileFilter(filter);
        fInput.setSelectedFile(new File(""));
    	String fileName;
    		
        if(fInput.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fInput.getSelectedFile().getAbsolutePath();
            setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
            
            BufferedReader reader = null;
            boolean success = true;
            String text = "";
        
            try {
                FileReader fRdr = new FileReader(fileName);
                reader = new BufferedReader(fRdr);
                
                while(reader.ready()) {
                    if(!text.endsWith(".") && !text.endsWith("!") &&
                       !text.endsWith("?") && !text.endsWith("\"")) {
                        text = text.concat(" ");
                    }
                    text = text.concat(reader.readLine());
                }
            } catch(FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Load Failed: File Not Found");
                success = false;
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Load failed: Input Error.");
                success = false;
            }
               
            if(success) {
                setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
                TextParser parser = new TextParser(this, true, text);
                parser.setVisible(true);
                
                if(!parser.aborted()) {
                    titleField.setText("Unnamed ReCobbler");
                    sentences = parser.getSentences();
                    tags = parser.getTags();
                    populateList();
                    // VV unnecessary work--eventually have TP count for you
                    countWords();
                    goal = wordCount;
                    updateWords();
                    nanoCheck.setSelected(false);
                }
            }
        }
    }
    
    private void load() {
        JFileChooser fInput = new JFileChooser();
        FileNameExtensionFilter filter = 
                new FileNameExtensionFilter("Cobbler Files", "cbl");
        fInput.setFileFilter(filter);
        fInput.setSelectedFile(new File(""));
    	String fileName;
    		
        if(fInput.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fInput.getSelectedFile().getAbsolutePath();
            
            try {
                FileInputStream out = new FileInputStream(fileName);
                ObjectInputStream oos = new ObjectInputStream(out);

                titleField.setText((String) oos.readObject());
                sentences = (ArrayList<Sentence>) oos.readObject();
                tags = (ArrayList<Tag>) oos.readObject();
                wordCount = oos.readInt();
                goal = oos.readInt();
                nanoCheck.setSelected(oos.readBoolean());

                populateList();
                toggleNanoMode();
                updateWords();
                oos.close();

            } catch(FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, 
                        "Load Failed--File Not Found.");
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, 
                        "Load Failed--File not Compatible.");
            } catch(ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, 
                        "Load Failed--Class Not Found.");
            }
        }
    }
    
    private void save() {
        /** SAVE FILE FORMAT:
         *  -- Title String
         *  -- ArrayList of Sentences
         *  -- ArrayList of Tags
         *  -- WordCount
         *  -- Goal
         *  -- NaNoWriMode boolean
         */
        
        String title = titleField.getText();
        title = title.replace(".", "");
        title = title.replace("/", "_");
        title = title.replace("\\", "_");
        title = title.replace(":", "_");
        
        JFileChooser fInput = new JFileChooser();
        FileNameExtensionFilter filter = 
                new FileNameExtensionFilter("Cobbler Files", "cbl");
        fInput.setFileFilter(filter);
        fInput.setSelectedFile(new File(title + ".cbl"));
    	String fileName;
    		
        if(fInput.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fInput.getSelectedFile().getAbsolutePath();

            if(fileName == null) {
                    fileName = "novel.cbl";
            }

            if(!fileName.endsWith(".cbl")) {
                    fileName = fileName.concat(".cbl");
            }
            
            try {
                FileOutputStream out = new FileOutputStream(fileName);
                ObjectOutputStream oos = new ObjectOutputStream(out);
                
                oos.writeObject(titleField.getText());
                oos.writeObject(sentences);
                oos.writeObject(tags);
                oos.writeInt(wordCount);
                oos.writeInt(goal);
                oos.writeBoolean(nanoCheck.isSelected());
                oos.close();
                
            } catch(FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, 
                        "Save failed--File Not Found.");
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, 
                        "Save failed--Output Error.");
            }
        }
    }
    
    private void cobble() {
        setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
            
        String title = titleField.getText();
        if(title.isEmpty()) title = "novel";
        title = title.replace(".", "");
        title = title.replace("/", "_");
        title = title.replace("\\", "_");
        title = title.replace(":", "_");
        
        JFileChooser fInput = new JFileChooser();
        FileNameExtensionFilter filter = 
                new FileNameExtensionFilter("Text Files", "txt");
        fInput.setFileFilter(filter);
        fInput.setSelectedFile(new File(title + ".txt"));
    	String fileName;
    		
        if(fInput.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName = fInput.getSelectedFile().getAbsolutePath();

            if(fileName == null) {
                    fileName = "novel.txt";
            }

            if(!fileName.endsWith(".txt")) {
                    fileName = fileName.concat(".txt");
            }
            
            //System.out.println("Cobbling!");
            String novel = 
                    Cobbler.cobble(titleField.getText(), sentences);
            //System.out.println("Cobble complete.");
            //System.out.println(novel);
            
            try {
                PrintWriter printer = new PrintWriter(fileName);
                printer.print(novel);
                printer.close();
                JOptionPane.showMessageDialog(null, 
                        "Cobble complete.");
            } catch(FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, 
                        "Save failed--File Not Found.");
            }
            
            setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
            
        }
    }
}
